#!/usr/bin/bash

#
# Copyright (c) 2015-2018, Erigones, s. r. o.
#

unset LD_LIBRARY_PATH
PATH=/usr/bin:/usr/sbin:/smartdc/bin
export PATH
export COMPUTENODE_SETUP_START=$(date +%s)

set -o errexit
set -o pipefail
set -o xtrace

export PS4='{% raw %}[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }{% endraw %}'
export BASH_XTRACEFD=2

export CONSOLE_FD=4
exec 2>>/var/log/computenode-install.log
exec 4>>/dev/console

# Time to wait for each VM to setup (in seconds)
VM_DEPLOY_TIMEOUT=600

ERIGONES_HOME="/opt/erigones"
ESDC_VERSION="/opt/custom/esdc.version"
CTLSH="${ERIGONES_HOME}/bin/ctl.sh"
OPENSSL="/opt/local/bin/openssl"
OPENSSL_HOME="/opt/local/etc/openssl"
SVC_CERT_FILE_NAME="dc-erigonesd.pem"
SVC_CERT_FILE="/opt/custom/etc/${SVC_CERT_FILE_NAME}"
QUERY_CFGDB="${ERIGONES_HOME}/bin/query_cfgdb"
TIMEOUT="/opt/local/bin/timeout"


# Helper functions
function printf_log() {
	printf "$@" >&${CONSOLE_FD}
}

function fatal() {
	printf_log "%-80s\r" " "
	printf_log "computenode configuration: fatal error: $*\n"
	echo "computenode configuration: fatal error: $*"
	exit 1
}

function errexit() {
	[[ $1 -ne 0 ]] || exit 0
	fatal "error exit status $1"
}

function cr_once() {
	if [[ -z "${did_cr_once}" ]]; then
		printf '\033c' >&${CONSOLE_FD}
		# This is to move us to the beginning of the line with the login: prompt
		printf "\r" >&${CONSOLE_FD}
		did_cr_once=1
	fi
}

function create_setup_file() {
	[[ -f /var/lib/setup.json ]] && rm -f /var/lib/setup.json
	echo "{" \
		"\"setup_time\": $(date +%s)," \
		"\"complete\": true" \
		"}" \
		> /var/lib/setup.json
	chmod 400 /var/lib/setup.json
}

# Main part
USB_COPY=$(svcprop -p "joyentfs/usb_copy_path" svc:/system/filesystem/smartdc:default)

. /lib/sdc/config.sh

load_sdc_sysinfo
load_sdc_config

trap 'errexit $?' EXIT

if [[ "${CONFIG_stop_before_setup}" == "true" ]]; then
	# This option is for development purposes and it allows the installer to
	# be stopped before any agents and computenode zones are installed.
	exit 0
fi

if [[ -f /var/lib/setup.json ]]; then
	exit 0
fi

function configure_erigonesd() {
	if [[ ! -f "${SVC_CERT_FILE}" ]]; then
		fatal "SSL certificate file not present: ${SVC_CERT_FILE}"
	fi

	cat > /opt/erigones/core/celery/local_config.py << EOF
BROKER_URL = 'amqp://{{ esdc_mgmt.rabbitmq.user }}:${RABBITMQ_PASSWORD}@${RABBITMQ_IP}:{{ esdc_mgmt.rabbitmq.port_ssl }}/{{ esdc_mgmt.rabbitmq.vhost }}'
CELERY_RESULT_BACKEND = 'redis://:${REDIS_PASSWORD}@${REDIS_IP}:{{ esdc_mgmt.redis.port_ssl }}/0'
ERIGONES_MGMT_WORKERS = ('mgmt@{{ esdc_mgmt.hostname | default('mgmt01.local') }}',)

import ssl

BROKER_USE_SSL = { 'cert_reqs': ssl.CERT_REQUIRED, 'ca_certs': '${SVC_CERT_FILE}' }
REDIS_BACKEND_USE_SSL = { 'ssl_cert_reqs': ssl.CERT_REQUIRED, 'ssl_ca_certs': '${SVC_CERT_FILE}' }
EOF

	chown root:root /opt/erigones/core/celery/local_config.py
	chmod 0600 /opt/erigones/core/celery/local_config.py
}

function configure_zabbix() {
	sed -i '' "s|@MON_IPADDR@|${MON_IP}|" /opt/zabbix/etc/zabbix_agentd.conf
	sed -i '' "s|@NODE_HOSTNAME@|${SYSINFO_UUID}|" /opt/zabbix/etc/zabbix_agentd.conf
}

function install_isos() {
	zfs list zones/iso &>/dev/null
	if [[ $? -eq 0 && -d "${USB_COPY}/isos" ]]; then
		for iso in "${USB_COPY}"/isos/*.iso; do
			printf_log "\r%-64s" "Copying $(basename "${iso}")... "
			cp "${iso}" /iso/
			printf_log "%4s\n" "done"
		done
	fi
}

function install_archives() {
	{% for arch in usb_archives %}
	if [[ ! -d "{{ arch.target }}" ]]; then
		archive="{{ arch.name }}{{ builder.archive.ext }}"
		printf_log "\r%-64s" "Preparing {{ arch.target }} by extracting ${archive}... "
		gtar xf "${USB_COPY}/archives/${archive}" -C / &> /dev/null
		printf_log "%4s\n" "done"
	fi
	{% endfor %}

	if [[ ! -d "{{ usb_archive_esdc.target }}" ]]; then
		archive="{{ usb_archive_esdc.name }}{{ builder.archive.ext }}"
		printf_log "\r%-64s" "Preparing {{ usb_archive_esdc.target }} by extracting ${archive}... "
		gtar xf "${USB_COPY}/archives/${archive}" -C /opt &> /dev/null
		printf_log "%4s\n" "done"
	fi
}

function set_esdc_version() {
	echo "v$("${CTLSH}" esdc_version)" > "${ESDC_VERSION}"
}

function __zk() {
	"${QUERY_CFGDB}" "${@}"
}

function _zk() {
	if ! __zk "${@}" 2> /dev/null; then
		fatal "Error: cfgdb command \"${@}\" failed"
	fi
}

function _zk_noerror() {
	# return success anyway
	__zk "${@}" 2> /dev/null || true
}

# omit SSL certificate verification
function _zk_noverify() {
	_zk_noerror -k "${@}"
}

test_cfgdb_connect() {
	if [[ -z "$(_zk_noverify get /esdc)" ]]; then
		fatal "Unable to query cfgdb"
	fi
}

test_port_open() {
	local host="${1}"
	local port="${2}"
	local waittime=5

	"${TIMEOUT}" "${waittime}" nc -z "${host}" "${port}"
}

function setup_svc_ssl_cert() {
	# download SSL cert
	local svc_cert="$(_zk_noverify get /esdc/settings/security/services_ssl_cert)"
	local cert_hash_file

	# the only expected case for not getting the certificate
	# is adding v3.0.0 or later compute node to pre-v3.0.0 management
	if [[ -z "${svc_cert}" ]]; then
		# node must have SSL enabled...
		# fail loudly then
		fatal "No certificate retrieved from configuration database. Installation cannot continue."
	fi

	# save the public cert into openssl trusted certs
	echo "${svc_cert}" > "${SVC_CERT_FILE}"
	# rehash certificate
	cert_hash_file="${OPENSSL_HOME}/certs/$("${OPENSSL}" x509 -hash -noout -in "${SVC_CERT_FILE}").0"
	rm -f "${OPENSSL_HOME}/certs/${SVC_CERT_FILE_NAME}" "${cert_hash_file}"
	ln -s "${SVC_CERT_FILE}" "${OPENSSL_HOME}/certs/${SVC_CERT_FILE_NAME}"
	ln -s "${SVC_CERT_FILE_NAME}" "${cert_hash_file}"
}

# Wait for configuration database availability
function wait_for_cfgdb() {
	while true; do
		printf_log "\r%-64s" "Waiting for cfgdb availability... "
		if ping -n "${CFGDB_IP}" 2 > /dev/null 2>&1; then
			if test_port_open "${CFGDB_IP}" "{{ esdc_cfgdb.zookeeper.port_ssl }}" > /dev/null 2>&1; then
				printf_log "done\n"
				break
			fi
		fi
		printf_log "not yet\n"
		sleep 1
	done
}

function pull_cfgdb_data() {
	printf_log "\r%-64s" "Retrieving Danube Cloud management configuration from cfgdb... "

	# first search for node-specific configuration for this specific node
	_rabbitmq_ip=$(_zk_noerror get "/esdc/settings/node/${SYSINFO_Hostname}/rabbitmq/host")
	_redis_ip=$(_zk_noerror get "/esdc/settings/node/${SYSINFO_Hostname}/redis/host")
	_mon_ip=$(_zk_noerror get "/esdc/settings/node/${SYSINFO_Hostname}/zabbix/host")
	_rabbitmq_password=$(_zk_noerror get "/esdc/settings/${SYSINFO_Hostname}/rabbitmq/password")
	_redis_password=$(_zk_noerror get "/esdc/settings/${SYSINFO_Hostname}/redis/password")

	if [[ "${CONFIG_remote_node}" -eq 1 ]]; then
		# Get the remote IPs. If they do not exist, fill in cfgdb IP that was specified during install
		# because remote cfgdb is expected to be a proxy to all services
		# (unless explicitly specified otherwise in /esdc/settings/remote/*).

		# if node-specific config is not found, search generic remote configuration
		[[ -z "${_rabbitmq_ip}" ]] &&   _rabbitmq_ip=$(_zk_noerror get "/esdc/settings/remote/rabbitmq/host")
		[[ -z "${_redis_ip}" ]] &&      _redis_ip=$(_zk_noerror get "/esdc/settings/remote/redis/host")
		[[ -z "${_mon_ip}" ]] &&        _mon_ip=$(_zk_noerror get "/esdc/settings/remote/zabbix/host")

		# fallback for remote node is cfgdb IP
		[[ -z "${_rabbitmq_ip}" ]] &&   _rabbitmq_ip="${CFGDB_IP}"
		[[ -z "${_redis_ip}" ]] &&      _redis_ip="${CFGDB_IP}"
		[[ -z "${_mon_ip}" ]] &&       	_mon_ip="${CFGDB_IP}"
	fi

	# as a fallback, query global services settings (return error if not found)
	[[ -z "${_rabbitmq_ip}" ]] &&           _rabbitmq_ip=$(_zk get "/esdc/settings/rabbitmq/host")
	[[ -z "${_redis_ip}" ]] &&              _redis_ip=$(_zk get "/esdc/settings/redis/host")
	[[ -z "${_mon_ip}" ]] &&                _mon_ip=$(_zk get "/esdc/settings/zabbix/host")
	[[ -z "${_rabbitmq_password}" ]] &&     _rabbitmq_password=$(_zk get "/esdc/settings/rabbitmq/password")
	[[ -z "${_redis_password}" ]] &&        _redis_password=$(_zk get "/esdc/settings/redis/password")

	if [[ -z "${_rabbitmq_ip}" || -z "${_redis_ip}" || -z "${_mon_ip}" || -z "${_rabbitmq_password}" || -z "${_redis_password}" ]]; then
		fatal "Incomplete data in configuration database, aborting setup"
	fi

	printf_log "%4s\n" "done"
	printf_log "\r%-64s" "Registering compute node into cfgdb... "

	_zk_noerror --force rmr "/esdc/nodes/hosts/${SYSINFO_UUID}"
	_zk creater "/esdc/nodes/hosts/${SYSINFO_UUID}" "${SYSINFO_Hostname}"
	_zk creater "/esdc/nodes/hosts/${SYSINFO_UUID}/headnode" "false"
	_zk creater "/esdc/nodes/hosts/${SYSINFO_UUID}/hostname" "${SYSINFO_Hostname}"
	if [[ -n "${CONFIG_remote_node}" ]]; then
		_zk creater "/esdc/nodes/hosts/${SYSINFO_UUID}/is_remote" "${CONFIG_remote_node}"
	else
		_zk creater "/esdc/nodes/hosts/${SYSINFO_UUID}/is_remote" "0"
	fi

	MON_IP=${_mon_ip}
	RABBITMQ_IP=${_rabbitmq_ip}
	REDIS_IP=${_redis_ip}
	RABBITMQ_PASSWORD=${_rabbitmq_password}
	REDIS_PASSWORD=${_redis_password}

	printf_log "%4s\n" "done"
}

function inform_user() {
	computenode_setup_duration=$(($(date +%s) - COMPUTENODE_SETUP_START))

	printf_log "\r%-64s" "Waiting for Danube Cloud Compute Node to initialize... "
	sleep 60
	printf_log "%4s\n" "done"

	printf_log "==> Setup complete (in %s seconds).\n" "${computenode_setup_duration}"
	printf_log "==> Press [enter] to get login prompt.\n"
}

function generate_ssh_keys() {
	# We need to setup SSH key pair, so backups and data replication just work
	if [[ ! -f "${CONFIG_config_inc_dir}/${CONFIG_ssh_private_key_file}" ]] && [[ ! -f "${CONFIG_config_inc_dir}/${CONFIG_ssh_public_key_file}" ]]; then
		printf_log "%-64s" "Generating SSH key pair... "
		ssh-keygen -q -C "${CONFIG_hostname}" -t rsa -b 2048 -f "${CONFIG_config_inc_dir}/id_rsa" -q -N ''
		chmod 400 "${CONFIG_config_inc_dir}/${CONFIG_ssh_private_key_file}"
		chmod 600 "${CONFIG_config_inc_dir}/${CONFIG_ssh_public_key_file}"
		mkdir -p /root/.ssh
		cp "${CONFIG_config_inc_dir}/${CONFIG_ssh_private_key_file}" "/root/.ssh/${CONFIG_ssh_private_key_file}"
		cp "${CONFIG_config_inc_dir}/${CONFIG_ssh_public_key_file}" "/root/.ssh/${CONFIG_ssh_public_key_file}"
		printf_log "%4s\n" "done"
	fi
}

function _validate_config_var() {
	var="${1}"
	value="${2}"

	[[ -z "${value}" ]] && fatal "Missing \"${var}\" option in configuration file"

	return 0
}

function validate_config() {
	_validate_config_var "cfgdb_admin_ip" "${CONFIG_cfgdb_admin_ip}"
	_validate_config_var "esdc_install_password" "${CONFIG_esdc_install_password}"
}

function random_string() {
	local length="${1:-24}"
	openssl rand -base64 "${length}" | tr -dc _A-Z-a-z-0-9
}

function import_smf_manifests() {
	printf_log "%-64s" "Importing SMF manifests... "

	for manifest in /opt/custom/smf/*.xml; do
		svccfg validate "${manifest}" || fatal "Failed to validate SMF manifest at ${manifest}"
		svccfg import "${manifest}"
	done

	printf_log "%4s\n" "done"
}

#
# Here we go
#

cr_once
printf_log "%-64s\n" "==> Setup starting... "
validate_config
install_archives
set_esdc_version
generate_ssh_keys

# Metatada for installation
CFGDB_IP="${CONFIG_cfgdb_admin_ip}"

wait_for_cfgdb
test_cfgdb_connect
setup_svc_ssl_cert
pull_cfgdb_data
configure_erigonesd
configure_zabbix

install_isos
import_smf_manifests
create_setup_file
inform_user


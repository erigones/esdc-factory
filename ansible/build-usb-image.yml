- name: Check builder host
  hosts: builder
  tasks:
    - include: tasks/build/check.yml
      when: skip_check is not defined or not skip_check

- name: Build esDC USB image
  force_handlers: true
  hosts: builder
  gather_facts: true  # Because of ansible_distribution check below

  vars:
    usb_image_size_gb: "{% if usb_type == 'hn' %}4{% else %}2{% endif %}"
    # name for temporary root fs that we will populate
    usb_tmp_image_root: "{{ usb_tmp_image }}.rootfs"
    # https://github.com/joyent/smartos-live/blob/release-20190912/tools/build_boot_image#L290
    usb_img_bs: 1048576     # (1024 * 1024) = MB

  handlers:
    - name: unmount USB image
      shell: umount "{{ usb_tmp_mountpoint }}"
      when: already_unmounted is not defined
      ignore_errors: yes

    - name: remove loopback device
      shell: lofiadm -d {{ lofiadm.stdout }}
      when: lofiadm is defined
      ignore_errors: yes

    - name: remove delegated image dataset
      shell: zfs destroy '{{ tmp_image_ds }}'
      ignore_errors: yes

  pre_tasks:
    - name: This playbook is currently available only for SmartOS
      assert: { that: "ansible_distribution == 'SmartOS'" }

    - name: Check usb_type variable
      assert: { that: "usb_type == 'hn' or usb_type == 'cn'" }

    - name: Ensure that temp folder exists
      file: path="{{ usb_tmp_dir }}" state=directory mode=0755

  tasks:
    - name: Cleanup temp folder
      file: path="{{ item }}" state=absent
      with_items:
        - "{{ usb_tmp_stage }}"
        - "{{ usb_tmp_mountpoint }}"
        - "{{ usb_tmp_image }}"

    - name: Create USB image temp folders
      file: path="{{ item }}" state=directory mode=0755
      with_items:
        - "{{ usb_tmp_stage }}"
        - "{{ usb_tmp_mountpoint }}"

    - name: Ensure that USB image output directory exists
      file: path="{{ builder.usb.dir }}/{{ release_type }}" state=directory mode=0755

    - name: Create empty .joyliveusb file
      file: path="{{ usb_tmp_stage }}/.joyliveusb" state=touch

    - name: Create empty {{ item }}/ folder
      file: path="{{ usb_tmp_stage }}/{{ item }}" state=directory mode=0755
      with_items:
        - datasets
        - zones
        - images
        - archives
        - isos
        - private

    - name: Copy base folder {{ item }}/
      copy: src="files/usb/{{ item }}" dest="{{ usb_tmp_stage }}/"
      with_items:
        - scripts

    - name: Create config.inc directory
      file: path="{{ usb_tmp_stage }}/config.inc" state=directory

    - name: Create "config.inc/generic" for usb_type {{ usb_type }}
      template: src="templates/usb/config.inc/generic.j2" dest="{{ usb_tmp_stage }}/config.inc/generic" mode=0444

    - name: Extract platform boot archive
      unarchive: src="{{ platform_boot_archive }}" dest="{{ usb_tmp_stage }}"

    - name: Create boot loader.conf
      template: src="templates/usb/boot/loader.conf.j2" dest="{{ usb_tmp_stage }}/boot/loader.conf" mode=0644

    - name: Extract platform OS archive
      unarchive: src="{{ platform_os_archive }}" dest="{{ usb_tmp_stage }}"

    - name: Rename platform folder
      shell: chdir="{{ usb_tmp_stage }}" mv "platform-{{ platform_version }}" "platform"

    - name: Get platform password
      set_fact: 
        platform_password: "{{ lookup('file', '{{ usb_tmp_stage }}/platform/root.password') }}"

    - name: Install prompt-config.sh script
      template: src="templates/usb/scripts/prompt-config.sh.j2" dest="{{ usb_tmp_stage }}/scripts/prompt-config.sh" mode=0755

    - name: Install headnode.sh script
      template: src="templates/usb/scripts/headnode.sh.j2" dest="{{ usb_tmp_stage }}/scripts/headnode.sh" mode=0755
      when: usb_type == 'hn'

    - name: Install computenode.sh script
      template: src="templates/usb/scripts/computenode.sh.j2" dest="{{ usb_tmp_stage }}/scripts/computenode.sh" mode=0755
      when: usb_type == 'cn'

    - name: Stage legal file {{ item }}
      get_url: url="{{ item.base_url|default(legal_url) }}/{{ item.src }}" dest="{{ usb_tmp_stage }}/{{ item.dst }}" mode=0444
      with_items: "{{ usb_legal_files }}"

    - name: Stage zones
      include: tasks/build/usb/zones.yml
      with_items: "{{ usb_vms }}"
      loop_control:
        loop_var: app
      when: usb_type == "hn"

    - name: Stage images
      include: tasks/build/usb/images.yml
      with_items: "{{ usb_images }}"
      loop_control:
        loop_var: img
      when: usb_type == "hn"

    - name: Stage ISO images
      include: tasks/build/usb/isos.yml
      with_items: "{{ usb_isos }}"
      loop_control:
        loop_var: iso

    - name: Stage archives
      include: tasks/build/usb/archives.yml
      with_items: "{{ usb_archives }}"
      loop_control:
        loop_var: arch

    - name: Stage esdc-node archive
      include: tasks/build/usb/esdc-node.yml

    - name: Create version file
      copy: content="esdc-{{ release_edition }}-{{ usb_type }}-{{ version }}" dest="{{ usb_tmp_stage }}/version"

    - name: Create USB image mountpoint
      file: path="{{ usb_tmp_mountpoint }}" state=directory mode=0755

    - name: Prepare empty USB image
      shell: xz -d -c "files/usb/images/{{ usb_image_size_gb }}gb.img.xz" > "{{ usb_tmp_image }}"

    - name: Get USB root partition size
      shell: awk '/^root / {print $4}' "files/usb/images/{{ usb_image_size_gb }}gb.partition.map"
      register: usb_root_size   # in bytes

    - name: Get USB root partition offset
      shell: awk '/^root / {print $3}' "files/usb/images/{{ usb_image_size_gb }}gb.partition.map"
      register: usb_root_offset   # in bytes

    - name: get zonename of this SunOS zone
      command: /usr/bin/zonename
      register: zonename

    - name: set expected delegated dataset name of this SunOS zone
      set_fact:
        data_image_ds: 'zones/{{ zonename.stdout }}/data'

    # DS mode currently does not work with GPT partitions
    #- name: set work dataset name (if delegated DS exists)
    #  set_fact:
    #    tmp_image_ds: '{{ data_image_ds }}/esdc-usb-image-{{ usb_type }}'
    #  when: data_image_ds in (ansible_mounts | map(attribute='device'))

    # zvol block device nodes are refreshed only after listing the root dev dir
    # (otherwise they remain old when you destroy & re-create dataset with the same name)
    - name: refresh zvol devices in /dev (DS mode)
      shell: "ls '/dev/zvol/dsk/{{ data_image_ds }}' '/dev/zvol/rdsk/{{ data_image_ds }}' &> /dev/null"
      when: tmp_image_ds is defined

    - name: create temporary dataset for root fs (DS mode)
      shell: "zfs create -V {{ usb_root_size.stdout }} -o volblocksize=4k -o sync=disabled {{ tmp_image_ds }}"
      when: tmp_image_ds is defined
      #ignore_errors: True      # this can be a lofs fallback implementation in the future (but it's probably not needed)
      #register: zfs_create
      notify:
        - unmount USB image
        - remove delegated image dataset

    - name: Format USB root fs (DS mode)
      shell: gdd bs={{ usb_img_bs }} conv=notrunc conv=sparse oflag=dsync skip=$((usb_root_offset.stdout / {{ usb_img_bs }})) count=$((usb_root_size.stdout / {{ usb_img_bs }})) "if={{ usb_tmp_image }}" "of={{ usb_tmp_image_root }}"
      when: tmp_image_ds is defined
      #when: tmp_image_ds is defined and zfs_create is not failed   # example of lofs fallback

    - name: Mount USB image device (DS mode)
      shell: mount -F pcfs -o noclamptime,foldcase,noatime '/dev/zvol/dsk/{{ tmp_image_ds }}:c' "{{ usb_tmp_mountpoint }}"
      when: tmp_image_ds is defined
      notify:
        - unmount USB image
        - remove delegated image dataset

    - name: Prepare empty root fs (lofs mode)
      shell: mkfile "{{ usb_root_size.stdout }}" "{{ usb_tmp_image_root }}"
      when: tmp_image_ds is not defined
      #notify:  # not needed, doing as a task later
      #  - remove temp root fs image

    - name: Create root fs loopback device (lofs mode)
      shell: lofiadm -a "{{ usb_tmp_image_root }}"
      when: tmp_image_ds is not defined
      register: lofiadm
      notify:
        - unmount USB image
        - remove loopback device

    # mkfs works with 512b blocks
    # see https://github.com/joyent/smartos-live/blob/release-20190912/tools/build_boot_image#L272
    - name: Format root fs (lofs mode)
      shell: mkfs -F pcfs -o "b=DANUBECLOUD,size={{ (usb_root_size.stdout|int / 512)|int }},nofdisk,fat=32" "{{ lofiadm.stdout | replace('/lofi/', '/rlofi/') }}"
      when: tmp_image_ds is not defined

    - name: Mount USB image loopback device (lofs mode)
      shell: mount -F pcfs -o noclamptime,foldcase,noatime "{{ lofiadm.stdout }}" "{{ usb_tmp_mountpoint }}"
      when: tmp_image_ds is not defined
      notify:
        - unmount USB image
        - remove loopback device

    - name: Copy stage files to USB image
      #synchronize: src="{{ usb_tmp_stage }}/" dest="{{ usb_tmp_mountpoint }}/" owner=no group=no perms=no times=no
      shell: /usr/bin/rsync --delay-updates --quiet --archive --no-perms --no-times --no-owner --no-group "{{ usb_tmp_stage }}/" "{{ usb_tmp_mountpoint }}/"

    - name: unmount USB image
      shell: umount '{{ usb_tmp_mountpoint }}'
      register: already_unmounted

    - name: Save USB image to output directory (DS mode)
      shell: gdd "bs={% if usb_type == 'hn' %}4000000{% else %}2000000{% endif %}" count=1000 'if=/dev/zvol/rdsk/{{ tmp_image_ds }}' | gzip -9 -c > "{{ builder.usb.dir }}/{{ release_type }}/esdc-{{ release_edition }}-{{ usb_type }}-{{ version | mandatory }}{{ builder.usb.ext }}"
      when: tmp_image_ds is defined

    - meta: flush_handlers  # Unmount USB image and remove loopback device (or remove dataset)

    # https://github.com/joyent/smartos-live/blob/release-20190912/tools/build_boot_image#L293
    - name: Integrate root fs into USB image (lofs mode)
      shell: "gdd bs={{ usb_img_bs }} conv=notrunc conv=sparse oflag=dsync seek={{ (usb_root_offset.stdout|int / usb_img_bs)|int }} count={{ (usb_root_size.stdout|int / usb_img_bs)|int }} if={{ usb_tmp_image_root }} of={{ usb_tmp_image }}"
      when: tmp_image_ds is not defined
      register: dd_root2usb
      # check if exactly usb_root_size bytes were transfered (we can do it because all is alligned to usb_img_bs)
      failed_when: not "{{ usb_root_size.stdout }} bytes " in dd_root2usb.stderr

    - name: Remove temp root fs image (lofs mode)
      shell: rm -f "{{ usb_tmp_image_root }}"
      when: tmp_image_ds is not defined

    - name: Save USB image to output directory (lofs mode)
      shell: gzip -9 -c "{{ usb_tmp_image }}" > "{{ builder.usb.dir }}/{{ release_type }}/esdc-{{ release_edition }}-{{ usb_type }}-{{ version | mandatory }}{{ builder.usb.ext }}"
      when: tmp_image_ds is not defined

    - name: Stat USB image file
      stat: path="{{ builder.usb.dir }}/{{ release_type }}/esdc-{{ release_edition }}-{{ usb_type }}-{{ version | mandatory }}{{ builder.usb.ext }}" checksum_algorithm="sha1"
      register: usb_image_stat

    - name: Create release notes
      template: src="templates/usb/notes.j2" dest="{{ builder.usb.dir }}/{{ release_type }}/esdc-{{ release_edition }}-{{ usb_type }}-{{ version | mandatory }}.notes" mode=0644
      vars:
        usb_image_file: "esdc-{{ release_edition }}-{{ usb_type }}-{{ version | mandatory }}{{ builder.usb.ext }}"
        usb_image_file_sha1: "{{ usb_image_stat.stat.checksum }}"

  post_tasks:
    - name: Cleanup temp folder
      file: path="{{ item }}" state=absent
      with_items:
        - "{{ usb_tmp_stage }}"
        - "{{ usb_tmp_mountpoint }}"
        - "{{ usb_tmp_image }}"

    - name: Create manifest and symlinks
      include: tasks/build/save-package.yml
      vars:
        save_dir: "{{ builder.usb.dir }}/{{ release_type }}"
        pkg_base_name: "esdc-{{ release_edition }}-{{ usb_type }}"
        pkg_name: "esdc-{{ release_edition }}-{{ usb_type }}-{{ version }}"
        pkg_version: "{{ version }}"
        pkg_ext: "{{ builder.usb.ext }}"
        pkg_desc: "Danube Cloud {{ release_edition_long }} {% if usb_type == 'hn' %}headnode{% else %}compute node{% endif %} (platform: {{ platform_version }})"
        pkg_link: "esdc-{{ release_edition }}-{{ usb_type }}-latest"
        pkg_link_exts:
            - "{{ builder.usb.ext }}"
            - ".notes"

#---------------------------------------------------------------------
#
# Danube Cloud
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
	log		127.0.0.1 local2 
	chroot	/var/lib/haproxy
	pidfile	/var/run/haproxy.pid
	maxconn	30000
	user	haproxy
	group	haproxy
	daemon
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/certs
	stats socket /var/lib/haproxy/stats
	tune.ssl.default-dh-param 2048
	ssl-default-bind-options no-sslv3 no-tls-tickets
	ssl-default-bind-ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will 
# use if not designated in their block
#---------------------------------------------------------------------
defaults
	mode	http
	log		global
	option	dontlognull
	option	httplog
	option	forwardfor
	option	redispatch
	option	http-server-close 
	maxconn	3000
	retries	3
	timeout connect	5s
	timeout client	60s
	timeout server	60s
	timeout tunnel	1h

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend main
	bind *:80
	bind *:443 ssl crt /etc/pki/tls/certs/server.pem
	rate-limit sessions 30

	acl url_static		path_beg -i /static /favicon.ico /robots.txt /humans.txt /maintenance.html
	acl url_guacamole	path_beg -i /guacamole/tunnel /guacamole/websocket-tunnel
	acl url_api			path_beg -i /api
	acl url_sio			path_beg -i /socket.io
	acl ip_allowed		src 127.0.0.1 ::1
	acl url_well_known	path_beg -i /.well-known

	redirect scheme https if !{ ssl_fc } !url_well_known

	monitor-uri		/zbx_ping

	# Maintenance mode
	#redirect location /maintenance.html code 302		if !ip_allowed !url_static

	use_backend nginx			if url_static
	use_backend nginx			if url_well_known
	use_backend tomcat			if url_guacamole
	use_backend gunicorn-api	if url_api
	use_backend gunicorn-sio	if url_sio

	default_backend gunicorn-gui
   
#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
backend nginx
	balance		roundrobin
	reqadd		X-Forwarded-Proto:\ https
	server		nginx-8008 127.0.0.1:8008 check

#---------------------------------------------------------------------
# tomcat backnd for server /guacamole/tunnel
#---------------------------------------------------------------------
backend tomcat
	balance		roundrobin
	reqadd		X-Forwarded-Proto:\ https
	server		tomcat-8080 127.0.0.1:8080 check

#---------------------------------------------------------------------
# main application backend for django api app (/api)
#---------------------------------------------------------------------
backend gunicorn-api
	balance		roundrobin
	timeout	server	180s
	reqadd		X-Forwarded-Proto:\ https
	server		gunicorn-api-8002 127.0.0.1:8002 check

#---------------------------------------------------------------------
# main application backend for django gui app (/)
#---------------------------------------------------------------------
backend gunicorn-gui
	balance		roundrobin
	reqadd		X-Forwarded-Proto:\ https
	server		gunicorn-gui-8001 127.0.0.1:8001 check

#---------------------------------------------------------------------
# main application backend for django sio app (/socket.io)
#---------------------------------------------------------------------
backend gunicorn-sio
	balance		roundrobin
	reqadd		X-Forwarded-Proto:\ https
	server		gunicorn-sio-8000 127.0.0.1:8000 check

#---------------------------------------------------------------------
# stats (protected by firewall)
#---------------------------------------------------------------------
frontend stats
	bind *:9999
	default_backend stats

backend stats
	stats enable
	stats realm Haproxy\ Statistics
	stats uri /


# BEGIN Danube Cloud rabbitmq service proxy
listen rabbitmq
	mode tcp
	bind *:{{ esdc_mgmt.rabbitmq.port_ssl }} ssl crt {{ esdc_mgmt.svc_cert_file }}
	server rabbitmq-mgmt 127.0.0.1:{{ esdc_mgmt.rabbitmq.port }}
# END Danube Cloud rabbitmq service proxy
# BEGIN Danube Cloud redis service proxy
listen redis
	mode tcp
	bind *:{{ esdc_mgmt.redis.port_ssl }} ssl crt {{ esdc_mgmt.svc_cert_file }}
	server redis-mgmt 127.0.0.1:{{ esdc_mgmt.redis.port }}
# END Danube Cloud redis service proxy
# BEGIN Danube Cloud zk_rest service proxy
listen zk_rest
	mode tcp
	bind *:{{ esdc_cfgdb.zk_rest_api.port }}
	server zk-rest-cfgdb 127.0.0.1:{{ esdc_cfgdb.zookeeper.port_ssl }}
# END Danube Cloud zk_rest service proxy

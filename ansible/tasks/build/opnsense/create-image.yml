---
- name: Stop virtual machine
  vmadm: uuid="{{ zone_uuid }}" state=stopped

- name: Create temp image directory
  file: path="/opt/{{ zone_uuid }}" state=directory

- name: Generate image uuid
  command: uuidgen
  register: imguuidcmd

- name: Set vars
  set_fact:
    imguuid: "{{ imguuidcmd.stdout }}"
    src_manifest: "/opt/{{ zone_uuid }}/{{ image_name }}-{{ image_version }}.imgmanifest.src"
    imgzvol: "zones/{{ zone_uuid }}-disk1"

- name: Generate image manifest
  template: src=files/opnsense/opnsense.imagemanifest.j2
            dest="{{ src_manifest }}"
            owner=root
            mode=0644

- name: Verify image manifest
  shell: json < "{{ src_manifest }}" > /dev/null

- name: Snapshot disk
  command: zfs snapshot "{{ imgzvol }}@imgcreate"

- name: Create image
  shell: /opt/erigones/bin/esimg create -v -s "{{ imgzvol }}@imgcreate" -d "/opt/{{ zone_uuid }}" < "{{ src_manifest }}"

- name: Rename image file
  file: src="/opt/{{ zone_uuid }}/{{ imguuid }}/file"
        path="/opt/{{ zone_uuid }}/{{ image_name }}-{{ image_version }}.zfs.gz"
        state=hard

- name: Rename image manifest
  file: src="/opt/{{ zone_uuid }}/{{ imguuid }}/manifest"
        path="/opt/{{ zone_uuid }}/{{ image_name }}-{{ image_version }}.imgmanifest"
        state=hard

- name: Download image artefacts
  fetch: src="{{ item }}"
         dest="{{ builder_dir }}/"
         flat=yes
         fail_on_missing=yes
         validate_checksum=yes
  with_items:
    - "/opt/{{ zone_uuid }}/{{ image_name }}-{{ image_version }}.zfs.gz"
    - "/opt/{{ zone_uuid }}/{{ image_name }}-{{ image_version }}.imgmanifest"
    - "/tmp/{{ zone_uuid }}.json"

- name: Remove file leftovers
  file: path="{{ item }}" state=absent
  with_items:
    - "/opt/{{ zone_uuid }}"
    - "/tmp/{{ zone_uuid }}.json"

- name: Get virtual machine configuration
  shell: vmadm get "{{ zone_uuid }}"
  register: vm_manifest
  when: remove_base_image

- name: Get used Linux (CentOS) base image uuid
  set_fact: image_uuid="{{ (vm_manifest.stdout | from_json)['disks'][0]['image_uuid'] }}"
  when: remove_base_image

- name: Remove virtual machine
  vmadm: name="{{ zone_uuid }}" state=absent

- name: Remove used base Linux (CentOS) image
  shell: imgadm delete -P zones "{{ image_uuid }}"
  when: remove_base_image
  ignore_errors: true

- name: Create symlink to the latest version
  file: src="{{ builder_dir }}/{{ item.src }}"
        dest="{{ builder_dir }}/{{ item.dest }}"
        state=link
  with_items:
    - src: "{{ image_name }}-{{ image_version }}.zfs.gz"
      dest: "{{ image_name }}-latest.zfs.gz"
    - src: "{{ image_name }}-{{ image_version }}.imgmanifest"
      dest: "{{ image_name }}-latest.imgmanifest"
  delegate_to: builder

- name: Create IMGAPI item
  include: tasks/build/imgapi/item.yml
      images_dir="{{ builder.image.dir }}"
      image_file_ext='.zfs.gz'
      image_manifest="{{ builder_dir }}/{{ image_name }}-{{ image_version }}.imgmanifest"
  delegate_to: builder

- name: Re-create IMGAPI root manifest in {{ builder.image.dir }}/manifest
  include: tasks/build/imgapi/root.yml
      imgapi_dir="{{ builder.image.dir }}"
  delegate_to: builder
